{"ast":null,"code":"var _jsxFileName = \"/Users/Youzen/Desktop/Backstage-exercise/src/components/AuthComponents.js\";\n//路由鉴权组件，判断用户有没有登录，没有登陆的话则重定向强制跳转回登录页面\n//🌟思路：判断 token 是否存在\n//如果存在，则直接正常渲染\n//如果不存在，则重定向到登录的路由页\n//🌟高阶组件：把一个组件当作另外一个组件的参数传入，然后通过一定的判断返回新的组件\nimport { getToken } from '@/utils';\nimport { Navigate } from 'react-router-dom'; //🌟🌟通过路由的 Navigate to 组件进行重定向导航\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AuthComponents(_ref) {\n  let {\n    children\n  } = _ref;\n  //默认参数，只要是在组件内写的任何东西都会放到 children 内\n  const isHaveToken = getToken();\n\n  if (isHaveToken) {\n    //判断 token 是否存在\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: children\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 10\n    }, this); //replace 替换路由\n  }\n}\n\n_c = AuthComponents;\nexport { AuthComponents }; //🔥以后的组件都可以在路由的位置这么包裹 -> <AuthComponent> ... </AuthComponent> ， 这样 ... 就是 AuthComponent 的 children\n//🔥比如：<AuthComponent> <layout /> </AuthComponent>\n//登录了则会渲染为：<>{<layout /></>\n//非登录则会渲染为：<Navigate to='/login' replace/>/\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthComponents\");","map":{"version":3,"names":["getToken","Navigate","AuthComponents","children","isHaveToken"],"sources":["/Users/Youzen/Desktop/Backstage-exercise/src/components/AuthComponents.js"],"sourcesContent":["//路由鉴权组件，判断用户有没有登录，没有登陆的话则重定向强制跳转回登录页面\n\n//🌟思路：判断 token 是否存在\n\t//如果存在，则直接正常渲染\n\t//如果不存在，则重定向到登录的路由页\n\t\n//🌟高阶组件：把一个组件当作另外一个组件的参数传入，然后通过一定的判断返回新的组件\n\nimport { getToken } from '@/utils'\nimport { Navigate } from 'react-router-dom' //🌟🌟通过路由的 Navigate to 组件进行重定向导航\n\nfunction AuthComponents({ children }){//默认参数，只要是在组件内写的任何东西都会放到 children 内\n\tconst isHaveToken = getToken()\n\tif(isHaveToken){ //判断 token 是否存在\n\t\treturn <>{ children }</>\n\t}else{\n\t\treturn <Navigate to='/login' replace/>//replace 替换路由\n\t}\n}\n\n\nexport { AuthComponents }\n//🔥以后的组件都可以在路由的位置这么包裹 -> <AuthComponent> ... </AuthComponent> ， 这样 ... 就是 AuthComponent 的 children\n//🔥比如：<AuthComponent> <layout /> </AuthComponent>\n\t//登录了则会渲染为：<>{<layout /></>\n\t//非登录则会渲染为：<Navigate to='/login' replace/>/\n\n"],"mappings":";AAAA;AAEA;AACC;AACA;AAED;AAEA,SAASA,QAAT,QAAyB,SAAzB;AACA,SAASC,QAAT,QAAyB,kBAAzB,C,CAA4C;;;;;AAE5C,SAASC,cAAT,OAAqC;EAAA,IAAb;IAAEC;EAAF,CAAa;EAAC;EACrC,MAAMC,WAAW,GAAGJ,QAAQ,EAA5B;;EACA,IAAGI,WAAH,EAAe;IAAE;IAChB,oBAAO;MAAA,UAAID;IAAJ,iBAAP;EACA,CAFD,MAEK;IACJ,oBAAO,QAAC,QAAD;MAAU,EAAE,EAAC,QAAb;MAAsB,OAAO;IAA7B;MAAA;MAAA;MAAA;IAAA,QAAP,CADI,CACkC;EACtC;AACD;;KAPQD,c;AAUT,SAASA,cAAT,G,CACA;AACA;AACC;AACA"},"metadata":{},"sourceType":"module"}