{"ast":null,"code":"//封装获取请求响应数据的方法\nimport axios from \"axios\";\nimport { getToken } from \"./token\";\nimport { history } from \"./history\"; //封装 axios\n//第一步：实例化\n\nconst http = axios.create({\n  baseURL: 'http://geek.itheima.net/v1_0',\n  //请求地址\n  timeout: 5000 //5s后超时\n\n}); //第二步：添加请求拦截器\n\nhttp.interceptors.request.use(config => {\n  //🔥🔥如果本地已经有 token，用这个 http 发起的请求都会则直接注入本地的 token ，可以在多处使用\n  const token = getToken();\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n}); //第三步：添加响应拦截器\n\nhttp.interceptors.response.use(response => {\n  //成功响应 200~300 的状态码时，执行下面的回调函数\n  return response.data;\n}, error => {\n  //当 token 过期，返回 401 状态码时，执行下面的回调函数\n  if (error.response.status === 401) {\n    //方式一：跳转回登录页面\n    window.location.href = '/login';\n  } //当超出 200~300 的状态码时，执行下面的回调函数\n\n\n  return Promise.reject(error);\n});\nexport { http };","map":{"version":3,"names":["axios","getToken","history","http","create","baseURL","timeout","interceptors","request","use","config","token","headers","Authorization","error","Promise","reject","response","data","status","window","location","href"],"sources":["/Users/zen/Desktop/Backstage-exercise/src/utils/http.js"],"sourcesContent":["//封装获取请求响应数据的方法\nimport axios from \"axios\";\nimport  { getToken } from \"./token\"\nimport { history } from \"./history\"\n\n\n\n//封装 axios\n\n//第一步：实例化\nconst http = axios.create(\n\t{\n\t\tbaseURL: 'http://geek.itheima.net/v1_0', //请求地址\n\t\ttimeout:5000 //5s后超时\n\t}\n)\n\n//第二步：添加请求拦截器\nhttp.interceptors.request.use((config)=>{\n\t//🔥🔥如果本地已经有 token，用这个 http 发起的请求都会则直接注入本地的 token ，可以在多处使用\n\tconst token = getToken()\n\t\n\tif(token){\n\t\tconfig.headers.Authorization = `Bearer ${token}`\n\t}\n\n\treturn config\n\t},(error)=> {\n\t\treturn Promise.reject(error)\n})\n\n\n//第三步：添加响应拦截器\nhttp.interceptors.response.use((response)=>{\n\t//成功响应 200~300 的状态码时，执行下面的回调函数\n\treturn response.data\n\t},(error) => {\n\t\n\t//当 token 过期，返回 401 状态码时，执行下面的回调函数\n\tif(error.response.status === 401){\n\t\t//方式一：跳转回登录页面\n\t\twindow.location.href = '/login'\n\t}\n\n\t//当超出 200~300 的状态码时，执行下面的回调函数\n\treturn Promise.reject(error)\n})\n\n\nexport { http }"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAUC,QAAV,QAA0B,SAA1B;AACA,SAASC,OAAT,QAAwB,WAAxB,C,CAIA;AAEA;;AACA,MAAMC,IAAI,GAAGH,KAAK,CAACI,MAAN,CACZ;EACCC,OAAO,EAAE,8BADV;EAC0C;EACzCC,OAAO,EAAC,IAFT,CAEc;;AAFd,CADY,CAAb,C,CAOA;;AACAH,IAAI,CAACI,YAAL,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA+BC,MAAD,IAAU;EACvC;EACA,MAAMC,KAAK,GAAGV,QAAQ,EAAtB;;EAEA,IAAGU,KAAH,EAAS;IACRD,MAAM,CAACE,OAAP,CAAeC,aAAf,GAAgC,UAASF,KAAM,EAA/C;EACA;;EAED,OAAOD,MAAP;AACC,CATF,EASII,KAAD,IAAU;EACX,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAXD,E,CAcA;;AACAX,IAAI,CAACI,YAAL,CAAkBU,QAAlB,CAA2BR,GAA3B,CAAgCQ,QAAD,IAAY;EAC1C;EACA,OAAOA,QAAQ,CAACC,IAAhB;AACC,CAHF,EAGIJ,KAAD,IAAW;EAEb;EACA,IAAGA,KAAK,CAACG,QAAN,CAAeE,MAAf,KAA0B,GAA7B,EAAiC;IAChC;IACAC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;EACA,CANY,CAQb;;;EACA,OAAOP,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACA,CAbD;AAgBA,SAASX,IAAT"},"metadata":{},"sourceType":"module"}