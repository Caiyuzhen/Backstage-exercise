{"ast":null,"code":"//login module\nimport { makeAutoObservable } from 'mobx';\nimport { http } from '@/utils';\n\nclass LoginStore {\n  //初始化处理\n  constructor() {\n    this.token = '';\n\n    this.getToken = async _ref => {\n      let {\n        mobile,\n        code\n      } = _ref;\n      //接收输入框传入的 {usename,password} 数据，解构赋值, {mobile,code} 是后端要求的命名码\n      //用异步函数把参数发送出去，调用登录接口 (token 鉴权接口)\n      const res = await http.post('http://geek.itheima.net/v1_0/authorizations', {\n        mobile,\n        code\n      }); //拿到 token 并存入 token 数据\n\n      this.token = res.data;\n    };\n\n    makeAutoObservable(this);\n  } //👇定义获得 token 的方法, 🔥🔥🔥然后在业务组件里边调用这个类的这个方法进行传参数\n\n\n}\n\nexport default LoginStore;","map":{"version":3,"names":["makeAutoObservable","http","LoginStore","constructor","token","getToken","mobile","code","res","post","data"],"sources":["/Users/zen/Desktop/Backstage-exercise/src/store/login.Store.js"],"sourcesContent":["//login module\nimport { makeAutoObservable } from 'mobx';\nimport { http } from '@/utils'\n\n\n\nclass LoginStore {\n\ttoken = ''\n\n\t//初始化处理\n\tconstructor(){\n\t\tmakeAutoObservable(this)\n\t}\n\n\t//👇定义获得 token 的方法, 🔥🔥🔥然后在业务组件里边调用这个类的这个方法进行传参数\n\tgetToken = async ({mobile,code}) => {//接收输入框传入的 {usename,password} 数据，解构赋值, {mobile,code} 是后端要求的命名码\n\n\t//用异步函数把参数发送出去，调用登录接口 (token 鉴权接口)\n\t\tconst res = await http.post('http://geek.itheima.net/v1_0/authorizations',{\n\t\t\tmobile,code\n\t\t})\n\t\t\n\t\t//拿到 token 并存入 token 数据\n\t\tthis.token = res.data\n\t\t\n\t}\n}\n\nexport default LoginStore"],"mappings":"AAAA;AACA,SAASA,kBAAT,QAAmC,MAAnC;AACA,SAASC,IAAT,QAAqB,SAArB;;AAIA,MAAMC,UAAN,CAAiB;EAGhB;EACAC,WAAW,GAAE;IAAA,KAHbC,KAGa,GAHL,EAGK;;IAAA,KAKbC,QALa,GAKF,cAAyB;MAAA,IAAlB;QAACC,MAAD;QAAQC;MAAR,CAAkB;MAAC;MAErC;MACC,MAAMC,GAAG,GAAG,MAAMP,IAAI,CAACQ,IAAL,CAAU,6CAAV,EAAwD;QACzEH,MADyE;QAClEC;MADkE,CAAxD,CAAlB,CAHmC,CAOnC;;MACA,KAAKH,KAAL,GAAaI,GAAG,CAACE,IAAjB;IAEA,CAfY;;IACZV,kBAAkB,CAAC,IAAD,CAAlB;EACA,CANe,CAQhB;;;AARgB;;AAsBjB,eAAeE,UAAf"},"metadata":{},"sourceType":"module"}