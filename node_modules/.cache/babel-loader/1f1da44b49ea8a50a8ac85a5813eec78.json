{"ast":null,"code":"'use strict';\n\nconst Promise = require('any-promise');\n/**\n * Expose compositor.\n */\n\n\nmodule.exports = compose;\n/**\n * Compose `middleware` returning\n * a fully valid middleware comprised\n * of all those which are passed.\n *\n * @param {Array} middleware\n * @return {Function}\n * @api public\n */\n\nfunction compose(middleware) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!');\n\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!');\n  }\n  /**\n   * @param {Object} context\n   * @return {Promise}\n   * @api public\n   */\n\n\n  return function (context, next) {\n    // last called middleware #\n    let index = -1;\n    return dispatch(0);\n\n    function dispatch(i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'));\n      index = i;\n      let fn = middleware[i];\n      if (i === middleware.length) fn = next;\n      if (!fn) return Promise.resolve();\n\n      try {\n        return Promise.resolve(fn(context, function next() {\n          return dispatch(i + 1);\n        }));\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }\n  };\n}","map":{"version":3,"names":["Promise","require","module","exports","compose","middleware","Array","isArray","TypeError","fn","context","next","index","dispatch","i","reject","Error","length","resolve","err"],"sources":["/Users/zen/Desktop/Backstage-exercise/node_modules/koa-router/node_modules/koa-compose/index.js"],"sourcesContent":["'use strict'\n\nconst Promise = require('any-promise')\n\n/**\n * Expose compositor.\n */\n\nmodule.exports = compose\n\n/**\n * Compose `middleware` returning\n * a fully valid middleware comprised\n * of all those which are passed.\n *\n * @param {Array} middleware\n * @return {Function}\n * @api public\n */\n\nfunction compose (middleware) {\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n\n  /**\n   * @param {Object} context\n   * @return {Promise}\n   * @api public\n   */\n\n  return function (context, next) {\n    // last called middleware #\n    let index = -1\n    return dispatch(0)\n    function dispatch (i) {\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = middleware[i]\n      if (i === middleware.length) fn = next\n      if (!fn) return Promise.resolve()\n      try {\n        return Promise.resolve(fn(context, function next () {\n          return dispatch(i + 1)\n        }))\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAT,CAAkBC,UAAlB,EAA8B;EAC5B,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAL,EAAgC,MAAM,IAAIG,SAAJ,CAAc,oCAAd,CAAN;;EAChC,KAAK,MAAMC,EAAX,IAAiBJ,UAAjB,EAA6B;IAC3B,IAAI,OAAOI,EAAP,KAAc,UAAlB,EAA8B,MAAM,IAAID,SAAJ,CAAc,2CAAd,CAAN;EAC/B;EAED;AACF;AACA;AACA;AACA;;;EAEE,OAAO,UAAUE,OAAV,EAAmBC,IAAnB,EAAyB;IAC9B;IACA,IAAIC,KAAK,GAAG,CAAC,CAAb;IACA,OAAOC,QAAQ,CAAC,CAAD,CAAf;;IACA,SAASA,QAAT,CAAmBC,CAAnB,EAAsB;MACpB,IAAIA,CAAC,IAAIF,KAAT,EAAgB,OAAOZ,OAAO,CAACe,MAAR,CAAe,IAAIC,KAAJ,CAAU,8BAAV,CAAf,CAAP;MAChBJ,KAAK,GAAGE,CAAR;MACA,IAAIL,EAAE,GAAGJ,UAAU,CAACS,CAAD,CAAnB;MACA,IAAIA,CAAC,KAAKT,UAAU,CAACY,MAArB,EAA6BR,EAAE,GAAGE,IAAL;MAC7B,IAAI,CAACF,EAAL,EAAS,OAAOT,OAAO,CAACkB,OAAR,EAAP;;MACT,IAAI;QACF,OAAOlB,OAAO,CAACkB,OAAR,CAAgBT,EAAE,CAACC,OAAD,EAAU,SAASC,IAAT,GAAiB;UAClD,OAAOE,QAAQ,CAACC,CAAC,GAAG,CAAL,CAAf;QACD,CAFwB,CAAlB,CAAP;MAGD,CAJD,CAIE,OAAOK,GAAP,EAAY;QACZ,OAAOnB,OAAO,CAACe,MAAR,CAAeI,GAAf,CAAP;MACD;IACF;EACF,CAlBD;AAmBD"},"metadata":{},"sourceType":"script"}