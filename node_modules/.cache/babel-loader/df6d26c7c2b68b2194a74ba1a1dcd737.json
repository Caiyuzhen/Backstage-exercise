{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport { http } from '@/utils';\n\nclass UserInfoStore {\n  //💥💥💥💥响应式的处理动态数据 - makeAutoObservable\n  constructor() {\n    this.useInfo = {};\n\n    this.getUserInfo = async () => {\n      //调用接口获取数据,通过 xxx.data 来获取接口内的数据\n      const res = await http.get('/user/profile'); //通过 http 的拦截器\n\n      this.userInfo = res.data; //把接口内的数据赋值给 useInfo {}\n    };\n\n    makeAutoObservable(this);\n  } //获取用户信息的方法\n\n\n}\n\nexport default UserInfoStore;","map":{"version":3,"names":["makeAutoObservable","http","UserInfoStore","constructor","useInfo","getUserInfo","res","get","userInfo","data"],"sources":["/Users/zen/Desktop/Backstage-exercise/src/store/userInfoStore.js"],"sourcesContent":["import { makeAutoObservable } from 'mobx'\nimport { http } from '@/utils'\n\nclass UserInfoStore {\n\tuseInfo = {}\n\n\t//💥💥💥💥响应式的处理动态数据 - makeAutoObservable\n\tconstructor(){\n\t\tmakeAutoObservable(this)\n\t}\n\n\t//获取用户信息的方法\n\tgetUserInfo = async() =>{\n\t\t//调用接口获取数据,通过 xxx.data 来获取接口内的数据\n\t\tconst res = await http.get('/user/profile') //通过 http 的拦截器\n\t\tthis.userInfo = res.data //把接口内的数据赋值给 useInfo {}\n\t}\n}\n\n\nexport default UserInfoStore"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,MAAnC;AACA,SAASC,IAAT,QAAqB,SAArB;;AAEA,MAAMC,aAAN,CAAoB;EAGnB;EACAC,WAAW,GAAE;IAAA,KAHbC,OAGa,GAHH,EAGG;;IAAA,KAKbC,WALa,GAKC,YAAU;MACvB;MACA,MAAMC,GAAG,GAAG,MAAML,IAAI,CAACM,GAAL,CAAS,eAAT,CAAlB,CAFuB,CAEqB;;MAC5C,KAAKC,QAAL,GAAgBF,GAAG,CAACG,IAApB,CAHuB,CAGE;IACzB,CATY;;IACZT,kBAAkB,CAAC,IAAD,CAAlB;EACA,CANkB,CAQnB;;;AARmB;;AAiBpB,eAAeE,aAAf"},"metadata":{},"sourceType":"module"}